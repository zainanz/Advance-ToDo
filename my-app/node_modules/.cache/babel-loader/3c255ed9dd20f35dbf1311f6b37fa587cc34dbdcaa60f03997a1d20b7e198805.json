{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Cookies from 'js-cookie';\nconst initialState = {\n  isLoggedIn: false,\n  token: null,\n  // Add token to state\n  status: 'idle',\n  // Add status for async operations\n  error: null\n};\nexport const login = createAsyncThunk('auth/login', async userData => {\n  const response = await fetch(\"http://localhost:3000/login\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const data = await response.json();\n    console.log(data);\n    throw new Error('Login failed');\n  }\n  const data = await response.json();\n  // Optionally store the token in cookies\n  Cookies.set('token', data.token);\n  return data.token; // Return the token to the fulfilled action\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout(state) {\n      state.isLoggedIn = false;\n      state.token = null; // Clear the token when logging out\n      Cookies.remove('token'); // Optionally remove the token from cookies\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      console.log(state);\n      state.status = 'pending';\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoggedIn = true;\n      state.token = action.payload; // Set the token from the fulfilled action payload\n      state.status = 'idle'; // Reset the status\n      console.log(\"Login successful\", action.payload);\n    }).addCase(login.rejected, (state, action) => {\n      console.log(action);\n      state.status = \"idle\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Cookies","initialState","isLoggedIn","token","status","error","login","userData","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","Error","set","authSlice","name","reducers","logout","state","remove","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["/home/zainan-ali/code/zainanz/test-components/my-app/src/app/store/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Cookies from 'js-cookie';\n\nconst initialState = {\n  isLoggedIn: false,\n  token: null, // Add token to state\n  status: 'idle', // Add status for async operations\n  error: null\n}\n\nexport const login = createAsyncThunk('auth/login', async (userData) => {\n  const response = await fetch(\"http://localhost:3000/login\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    const data = await response.json();\n    console.log(data)\n    throw new Error('Login failed');\n  }\n\n  const data = await response.json();\n  // Optionally store the token in cookies\n  Cookies.set('token', data.token);\n  return data.token; // Return the token to the fulfilled action\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout(state){\n      state.isLoggedIn = false;\n      state.token = null; // Clear the token when logging out\n      Cookies.remove('token'); // Optionally remove the token from cookies\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        console.log(state);\n        state.status = 'pending';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoggedIn = true;\n        state.token = action.payload; // Set the token from the fulfilled action payload\n        state.status = 'idle'; // Reset the status\n        console.log(\"Login successful\", action.payload);\n      })\n      .addCase(login.rejected, (state, action) => {\n        console.log(action);\n        state.status = \"idle\";\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE,IAAI;EAAE;EACbC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGP,gBAAgB,CAAC,YAAY,EAAE,MAAOQ,QAAQ,IAAK;EACtE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IAC1DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB,MAAM,IAAII,KAAK,CAAC,cAAc,CAAC;EACjC;EAEA,MAAMJ,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC;EACAjB,OAAO,CAACqB,GAAG,CAAC,OAAO,EAAEL,IAAI,CAACb,KAAK,CAAC;EAChC,OAAOa,IAAI,CAACb,KAAK,CAAC,CAAC;AACrB,CAAC,CAAC;AAEF,MAAMmB,SAAS,GAAGxB,WAAW,CAAC;EAC5ByB,IAAI,EAAE,MAAM;EACZtB,YAAY;EACZuB,QAAQ,EAAE;IACRC,MAAMA,CAACC,KAAK,EAAC;MACXA,KAAK,CAACxB,UAAU,GAAG,KAAK;MACxBwB,KAAK,CAACvB,KAAK,GAAG,IAAI,CAAC,CAAC;MACpBH,OAAO,CAAC2B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACxB,KAAK,CAACyB,OAAO,EAAGL,KAAK,IAAK;MACjCR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MAClBA,KAAK,CAACtB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD0B,OAAO,CAACxB,KAAK,CAAC0B,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3CP,KAAK,CAACxB,UAAU,GAAG,IAAI;MACvBwB,KAAK,CAACvB,KAAK,GAAG8B,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BR,KAAK,CAACtB,MAAM,GAAG,MAAM,CAAC,CAAC;MACvBc,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEc,MAAM,CAACC,OAAO,CAAC;IACjD,CAAC,CAAC,CACDJ,OAAO,CAACxB,KAAK,CAAC6B,QAAQ,EAAE,CAACT,KAAK,EAAEO,MAAM,KAAK;MAC1Cf,OAAO,CAACC,GAAG,CAACc,MAAM,CAAC;MACnBP,KAAK,CAACtB,MAAM,GAAG,MAAM;MACrBsB,KAAK,CAACrB,KAAK,GAAG4B,MAAM,CAAC5B,KAAK,CAAC+B,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX;AAAO,CAAC,GAAGH,SAAS,CAACe,OAAO;AAC3C,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}